# app.py
import os
import yaml
import pandas as pd
import numpy as np
import yfinance as yf
import requests
from datetime import datetime
from flask import Flask, render_template_string

# === CONFIG ===
DEFAULT_LANGUAGE = "English"

CONFIG_PATH = "config.yaml"
if not os.path.exists(CONFIG_PATH):
    raise FileNotFoundError(f"Missing config.yaml. Please create one with tickers, start_date, etc.")

with open(CONFIG_PATH, "r") as f:
    config = yaml.safe_load(f)

TICKERS = config["tickers"]
START_DATE = config["start_date"]
FIB_LEVELS = config.get("fib_levels", [0.5, 0.618])
POLYGON_API_KEY = config.get("polygon_api_key") or os.getenv("POLYGON_API_KEY")

# === FLASK APP ===
app = Flask(__name__)

@app.route("/")
def index():
    return f"""
    <h2>ðŸ“ˆ Trading Signal Bot</h2>
    <p>Language: {DEFAULT_LANGUAGE}</p>
    <p><a href='/run'>Run Bot</a></p>
    """

@app.route("/run")
def run_bot():
    today_str = datetime.today().strftime("%Y-%m-%d")
    signals = []

    def fetch_yfinance(ticker, start_date, interval='1d'):
        df = yf.download(ticker, start=start_date, interval=interval)
        df.index.name = "Date"
        return df

    def fetch_polygon(ticker, start_date, interval='day'):
        url = f"https://api.polygon.io/v2/aggs/ticker/{ticker}/range/1/{interval}/{start_date}/2025-12-31"
        params = {"adjusted":"true","sort":"asc","limit":5000,"apiKey":POLYGON_API_KEY}
        r = requests.get(url, params=params)
        data = r.json()
        if 'results' not in data:
            raise Exception(f"Polygon error: {data}")
        records = [
            {'Date': pd.to_datetime(item['t'], unit='ms'), 'Open': item['o'], 
             'High': item['h'], 'Low': item['l'], 'Close': item['c'], 'Volume': item['v']}
            for item in data['results']
        ]
        df = pd.DataFrame(records).set_index('Date')
        return df

    def get_data(ticker, start_date, interval='day'):
        if POLYGON_API_KEY:
            try:
                return fetch_polygon(ticker, start_date, interval)
            except Exception as e:
                print(f"Polygon failed: {e} â€” using yfinance.")
        return fetch_yfinance(ticker, start_date)

    def find_wave_2(df, ticker, lookback=50, label="Major Degree"):
        swing_high = df['High'].rolling(lookback).max().iloc[-1]
        swing_low = df['Low'].rolling(lookback).min().iloc[-1]
        impulsive_leg = swing_high - swing_low
        fib_50 = swing_high - 0.5 * impulsive_leg
        fib_618 = swing_high - 0.618 * impulsive_leg
        current_price = df['Close'].iloc[-1]
        avg_vol = df['Volume'].rolling(20).mean().iloc[-1]
        last_vol = df['Volume'].iloc[-1]
        if fib_618 <= current_price <= fib_50 and last_vol < avg_vol:
            signals.append([today_str, ticker, "Wave 2", label, current_price])

    def find_wave_3_5(df, ticker):
        bb_window = 20
        df['MA20'] = df['Close'].rolling(bb_window).mean()
        df['STD20'] = df['Close'].rolling(bb_window).std()
        df['UpperBB'] = df['MA20'] + 2 * df['STD20']
        bb_breakout = df['Close'].iloc[-1] > df['UpperBB'].iloc[-1]
        vol_spike = df['Volume'].iloc[-1] > 1.5 * df['Volume'].rolling(20).mean().iloc[-1]
        if bb_breakout and vol_spike:
            signals.append([today_str, ticker, "Wave 3/5", "", df['Close'].iloc[-1]])

    # === Run signal checks ===
    for ticker in TICKERS:
        df = get_data(ticker, START_DATE)
        if df.empty or len(df) < 100:
            continue
        find_wave_2(df, ticker, lookback=50, label="Major Degree")
        find_wave_2(df, ticker, lookback=100, label="Larger Degree")
        find_wave_3_5(df, ticker)

    if signals:
        df_out = pd.DataFrame(signals, columns=["Date", "Ticker", "Signal", "Degree", "Price"])
        csv_name = f"signals_{today_str}.csv"
        df_out.to_csv(csv_name, index=False)
        result = f"âœ… Signals generated and saved to <b>{csv_name}</b>:<br><br>{df_out.to_html(index=False)}"
    else:
        result = "ðŸ˜• No signals today."

    return result

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)